#!/usr/bin/env python
# coding: utf-8

# # Regression Predict Student Solution
# 
# © Explore Data Science Academy
# 
# ---
# ### Honour Code
# 
# I {**YOUR NAME, YOUR SURNAME**}, confirm - by submitting this document - that the solutions in this notebook are a result of my own work and that I abide by the [EDSA honour code](https://drive.google.com/file/d/1QDCjGZJ8-FmJE3bZdIQNwnJyQKPhHZBn/view?usp=sharing).
# 
# Non-compliance with the honour code constitutes a material breach of contract.
# 
# ### Predict Overview: Spain Electricity Shortfall Challenge
# 
# The government of Spain is considering an expansion of it's renewable energy resource infrastructure investments. As such, they require information on the trends and patterns of the countries renewable sources and fossil fuel energy generation. Your company has been awarded the contract to:
# 
# - 1. analyse the supplied data;
# - 2. identify potential errors in the data and clean the existing data set;
# - 3. determine if additional features can be added to enrich the data set;
# - 4. build a model that is capable of forecasting the three hourly demand shortfalls;
# - 5. evaluate the accuracy of the best machine learning model;
# - 6. determine what features were most important in the model’s prediction decision, and
# - 7. explain the inner working of the model to a non-technical audience.
# 
# Formally the problem statement was given to you, the senior data scientist, by your manager via email reads as follow:
# 
# > In this project you are tasked to model the shortfall between the energy generated by means of fossil fuels and various renewable sources - for the country of Spain. The daily shortfall, which will be referred to as the target variable, will be modelled as a function of various city-specific weather features such as `pressure`, `wind speed`, `humidity`, etc. As with all data science projects, the provided features are rarely adequate predictors of the target variable. As such, you are required to perform feature engineering to ensure that you will be able to accurately model Spain's three hourly shortfalls.
#  
# On top of this, she has provided you with a starter notebook containing vague explanations of what the main outcomes are. 

# <a id="cont"></a>
# 
# ## Table of Contents
# 
# <a href=#one>1. Importing Packages</a>
# 
# <a href=#two>2. Loading Data</a>
# 
# <a href=#three>3. Exploratory Data Analysis (EDA)</a>
# 
# <a href=#four>4. Data Engineering</a>
# 
# <a href=#five>5. Modeling</a>
# 
# <a href=#six>6. Model Performance</a>
# 
# <a href=#seven>7. Model Explanations</a>

#  <a id="one"></a>
# ## 1. Importing Packages
# <a href=#cont>Back to Table of Contents</a>
# 
# ---
#     
# | ⚡ Description: Importing Packages ⚡ |
# | :--------------------------- |
# | In this section you are required to import, and briefly discuss, the libraries that will be used throughout your analysis and modelling. |
# 
# ---

# In[3]:


# Libraries for data loading, data manipulation and data visulisation
#import *
import numpy as np
import pandas as pd
# Libraries for data preparation and model building
#import *
import matplotlib.pyplot as plt
from matplotlib import rc
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
# Setting global constants to ensure notebook results are reproducible
PARAMETER_CONSTANT = 100


# <a id="two"></a>
# ## 2. Loading the Data
# <a class="anchor" id="1.1"></a>
# <a href=#cont>Back to Table of Contents</a>
# 
# ---
#     
# | ⚡ Description: Loading the data ⚡ |
# | :--------------------------- |
# | In this section you are required to load the data from the `df_train` file into a DataFrame. |
# 
# ---

# In[4]:


df = pd.read_csv('./data/df_train.csv', index_col=0)
test = pd.read_csv('./data/df_test.csv', index_col=0)


# <a id="three"></a>
# ## 3. Exploratory Data Analysis (EDA)
# <a class="anchor" id="1.1"></a>
# <a href=#cont>Back to Table of Contents</a>
# 
# ---
#     
# | ⚡ Description: Exploratory data analysis ⚡ |
# | :--------------------------- |
# | In this section, you are required to perform an in-depth analysis of all the variables in the DataFrame. |
# 
# ---
# 

# In[5]:


# look at data statistics
df.describe()
df.info()
df.shape
df.tail()


# In[6]:


#print(f'Mean: {test.Valencia_pressure.mean()}')
#print(f'Median: {test.Valencia_pressure.median()}')
#print(f'Mode: {test.Valencia_pressure.mode()}'


# In[7]:


# plot relevant feature interactions
features = ['Madrid_wind_speed','Bilbao_rain_1h','Valencia_wind_speed','Seville_humidity','Madrid_humidity',
           'Bilbao_clouds_all','Bilbao_wind_speed','Seville_clouds_all','Bilbao_wind_deg','Barcelona_wind_speed',
           'Barcelona_wind_deg','Madrid_clouds_all','Seville_wind_speed', 'Barcelona_rain_1h','Seville_rain_1h',
           'Bilbao_snow_3h','Barcelona_pressure','Seville_rain_3h','Madrid_rain_1h','Barcelona_rain_3h','Valencia_snow_3h',
           'Madrid_weather_id','Barcelona_weather_id','Bilbao_pressure','Seville_weather_id','Valencia_pressure',
           'Seville_temp_max','Madrid_pressure','Valencia_temp_max','Valencia_temp','Bilbao_weather_id','Seville_temp',
           'Valencia_humidity','Valencia_temp_min','Barcelona_temp_max','Madrid_temp_max','Barcelona_temp','Bilbao_temp_min',
           'Bilbao_temp','Barcelona_temp_min','Bilbao_temp_max', 'Seville_temp_min', 'Madrid_temp','Madrid_temp_min',
           'load_shortfall_3h']


# In[8]:


# evaluate correlation
df.corr()
corrmat = df.corr()
f, ax = plt.subplots(figsize=(8, 9))
sns.heatmap(corrmat, vmax=.8, square=True);


# In[9]:


# have a look at feature distributions
df[features].hist(figsize=(100,100))


# <a id="four"></a>
# ## 4. Data Engineering
# <a class="anchor" id="1.1"></a>
# <a href=#cont>Back to Table of Contents</a>
# 
# ---
#     
# | ⚡ Description: Data engineering ⚡ |
# | :--------------------------- |
# | In this section you are required to: clean the dataset, and possibly create new features - as identified in the EDA phase. |
# 
# ---

# In[10]:


# remove missing values/ features
q = df['Valencia_pressure'].mean()
df.copy()
df['Valencia_pressure'].fillna(value=q, inplace=True)
df.isnull().sum()


# In[11]:


# create new features

#data_mapping = {'level_1':1,'level_2':2,'level_3':3,'level_4':4,'level_5':5,'level_6':6,'level_7':7,'level_8':8,
               #'level_9':9,'level_10':10}
#df['Valencia_wind_deg_num'] = df['Valencia_wind_deg'].map(data_mapping)

dataMapping = {'sp1':1, 'sp2':2, 'sp3':3, 'sp4':4, 'sp5':5, 'sp6':6, 'sp7':7, 'sp8':8, 'sp9':9, 'sp10':10,
             'sp11':11, 'sp12':12, 'sp13':13, 'sp14':14, 'sp15':15, 'sp16':16, 'sp17':17, 'sp18':18, 'sp19':19, 
             'sp20':20, 'sp21':21, 'sp22':22, 'sp23':23, 'sp24':24, 'sp25':25} 
df['Seville_pressure_num'] = df['Seville_pressure'].map(dataMapping)


# In[12]:


#df['Valencia_wind_deg'].values


# In[13]:


#df.drop('Valencia_wind_deg',axis=1)
#df.drop('Seville_pressure',axis=1)
del df['Valencia_wind_deg']
del df['Seville_pressure']


# In[14]:


# engineer existing features
df.time = pd.to_datetime(df.time)
df.dtypes


# In[15]:


df['time'] = (df['time'] - df['time'].min())  / np.timedelta64(1,'D')
x = df['time'].values


# <a id="five"></a>
# ## 5. Modelling
# <a class="anchor" id="1.1"></a>
# <a href=#cont>Back to Table of Contents</a>
# 
# ---
#     
# | ⚡ Description: Modelling ⚡ |
# | :--------------------------- |
# | In this section, you are required to create one or more regression models that are able to accurately predict the thee hour load shortfall. |
# 
# ---

# In[16]:


# split data
from sklearn.model_selection import train_test_split
y=df.load_shortfall_3h
X=df.drop(['load_shortfall_3h'],axis=1)


# In[17]:


# create targets and features dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3332, random_state=50)


# In[18]:


# create one or more ML models
from sklearn.linear_model import LinearRegression


# In[19]:


model = LinearRegression()
model.fit(X_train, y_train)


# In[20]:


# evaluate one or more ML models
a = float(model.intercept_)


# In[21]:


b = model.coef_


# In[22]:


print("Slope:\t\t", b)
print("Intercept:\t", float(a))


# In[23]:


gen_y = model.predict(X_train)

# Plot the results
#plt.scatter(X_train, y_train, color='green')  # Plot the training data in green
plt.plot(X_train, gen_y, color='red')  # Plot the line connecting the generated y-values
plt.show()


# In[24]:


from sklearn import metrics


# In[25]:


print("Training:")
# Calculate the mean-squared-error
print('MSE:', metrics.mean_squared_error(y_train, gen_y))
# Calculate the R-squared metric
print('R_squared:', metrics.r2_score(y_train, gen_y))


# In[26]:


# Generate values of y from x, using the linear model
gen_y_test = model.predict(X_test)

# Plot the results
#plt.scatter(X_test, y_test, color='darkblue')


# In[27]:


print("Testing:")
print('MSE:', metrics.mean_squared_error(y_test, gen_y_test))
print('R_squared:', metrics.r2_score(y_test, gen_y_test))


# In[28]:


gen_y_test


# <a id="six"></a>
# ## 6. Model Performance
# <a class="anchor" id="1.1"></a>
# <a href=#cont>Back to Table of Contents</a>
# 
# ---
#     
# | ⚡ Description: Model performance ⚡ |
# | :--------------------------- |
# | In this section you are required to compare the relative performance of the various trained ML models on a holdout dataset and comment on what model is the best and why. |
# 
# ---

# In[29]:


# Compare model performance


# In[30]:


# Choose best model and motivate why it is the best choice


# <a id="seven"></a>
# ## 7. Model Explanations
# <a class="anchor" id="1.1"></a>
# <a href=#cont>Back to Table of Contents</a>
# 
# ---
#     
# | ⚡ Description: Model explanation ⚡ |
# | :--------------------------- |
# | In this section, you are required to discuss how the best performing model works in a simple way so that both technical and non-technical stakeholders can grasp the intuition behind the model's inner workings. |
# 
# ---

# In[31]:


# discuss chosen methods logic


# In[32]:


submissions = test[['time']]


# In[33]:


submissions['load_shortfall_3h'] = gen_y_test


# In[34]:


submissions


# In[35]:


submissions.to_csv("submission_cbb4.csv", index = None)


# In[36]:


submissions.shape


# In[37]:


import pickle

model_save_path = "mlr_model.pkl"
with open(model_save_path,'wb') as file:
    pickle.dump(model,file)

